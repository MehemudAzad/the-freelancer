# version: '3.8'

# services:
  # Zookeeper - Required for Kafka
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # broker:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: broker
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.5.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8085:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - "8086:8080"
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   environment:
  #     KAFKA_CLUSTERS_NAME: local
  #     KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
  #     # KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
  #     DYNAMIC_CONFIG_ENABLED: 'true'

      

  # Auth Service Database
  # auth-postgres:
  #   image: postgres:16-alpine
  #   container_name: auth-postgres-db
  #   environment:
  #     - POSTGRES_USER=authuser
  #     - POSTGRES_PASSWORD=yourstrongpassword
  #     - POSTGRES_DB=auth_db
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - ./auth-service/postgres-data:/var/lib/postgresql/data
  #     - ./auth-service/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # # Gig Service Database
  # gig-postgres:
  #   image: postgres:16-alpine
  #   container_name: gig-postgres-db
  #   environment:
  #     - POSTGRES_USER=giguser
  #     - POSTGRES_PASSWORD=yourstrongpassword
  #     - POSTGRES_DB=gig_db
  #   ports:
  #     - "5434:5432"
  #   volumes:
  #     - ./gig-service/postgres-data:/var/lib/postgresql/data
  #     - ./gig-service/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # # Job Proposal Service Database
  # job-proposal-postgres:
  #   image: postgres:16-alpine
  #   container_name: job-proposal-postgres-db
  #   environment:
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=password
  #     - POSTGRES_DB=job_proposal_db
  #   ports:
  #     - "5435:5432"
  #   volumes:
  #     - ./job-proposal-service/postgres-data:/var/lib/postgresql/data
